git 学习笔记

一、git安装
windows：下载软件--》出现窗口pc MINGW64安装成功  
		git config --global user.name "YOUR NAME"
		git config --global user.mail "your email"
		其他炒作参见linux常用命令
linux：yum或源码安装

二、git创建版本库
	创建一个空目录
	进入目录 git init生成.git目录
	目录下建立文件
	第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；
		git add 文件名
	第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。
		git commit -m “修改说明”
	
三、版本控制：
	1、版本回退：
		git log --pretty=oneline查看修改commit id
		git reset --hard HEAD 回退上一版本
		git reset --hard 【commit id】回退制定版本
		it relog查看最新版id
		git status查看状态：是否有文件没有commit及修改状态
	2、管理修改：
		git diff HEAD -- 文件名 命令可以查看工作区和版本库里面最新版本的区别
		每次修改，如果不add到暂存区，那就不会加入到commit中
	3、撤销修改
		场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
		场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，
			就回到了场景1，第二步按场景1操作。
		场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库
	4、删除文件
		git rm 删除文件，删错git checkout -- 文件名  返回的是最新版本，丢失最新修改

四、远程仓库：
	添加
	git remote add origin（远程库名） git@github.com:penbaben（github用户名）/pythonnode.git（仓库名）
	github上设置ssh key  生成本机key  ssh-keygen -t rsa
	git push -u origin master
	克隆
	git clone https://github.com/penbaben/pythonnode.git
	
五、分支管理
	1、创建分支：
		git checkout -b dev 创建分支dev 
		git branch 查看当前分支
		分支完成工作后 切换回master  git checkout master
		然后把dev合并到master： git merge dev
		删除dev ：git branch -d dev
		
	2、解决分支冲突
		查看分支合并情况
		git log --graph --pretty=oneline --abbrev-commit
		删除冲突分支
	3、分支策略
		git merge --no-ff -m "merge with no-ff" dev
		1、master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活
		2、dev分支或dev分支的分支上团队开发
		合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，
		而fast forward合并就看不出来曾经做过合并
	4、bug分支
		git stash隐藏当前工作
		git stash pop恢复同时把stash内容删除
		git stash list查看stash内容
		如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。
	5、多人协作：
		git checkout -b dev  penbaben/dev
	工作模式：
		1.首先，可以试图用git push origin branch-name推送自己的修改；
		2.如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
		3.如果合并有冲突，则解决冲突，并在本地提交；
		4.没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
		如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有
			创建，用命令git branch --set-upstream branch-name origin/branch-name。
六、标签
	1、打标签
		•命令git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id；
		•git tag -a <tagname> -m "blablabla..."可以指定标签信息；
		•git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；
		•命令git tag可以查看所有标签。
	2、标签操作
		•命令git push origin <tagname>可以推送一个本地标签；
		•命令git push origin --tags可以推送全部未推送过的本地标签；
		•命令git tag -d <tagname>可以删除一个本地标签；
		•命令git push origin :refs/tags/<tagname>可以删除一个远程标签。
七、使用github
	•在GitHub上，可以任意Fork开源仓库；
	•自己拥有Fork后的仓库的读写权限；
	•可以推送pull request给官方仓库来贡献代码。
八、使用码云：
	操作更github一样
九、自定义git
	1、忽略特殊文件
		创建 .gitignore文件--》把忽略的文件归类放入--》git add .gitignore--》git commit--》push
		删除备份删除本地要忽略的文件 --》git add * ———》git commit————》恢复文件 -->git status查看状态
		
	2、配置别名：
		git config --global alias 别名 命令







		